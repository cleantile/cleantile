- var opts = {title: "cleantile-tabs showing active tab", path: "../../../"}
include "../../lib/test" exposing opts

append imports
  link(rel="import", href="../../../polymer/polymer.html")
  link(rel="import", href="../../pane/cleantile-pane.html")
  link(rel="import", href="../cleantile-tabs.html")
  link(rel="import", href="../../demo/text-view/cleantile-text-view.html")

append style
  :stylus
    body
      margin 0
      padding 0
    html, body
      width 100%
      height 100%

append fixtures
  test-fixture#trio
    template
      cleantile-pane
        cleantile-tabs
        cleantile-text-view.first
        cleantile-text-view.default(active)
        cleantile-text-view.last
  test-fixture#toggling
    template
      cleantile-pane
        cleantile-tabs
        cleantile-text-view.first(active)
        cleantile-text-view.second


append tests
  :coffeescript
    describe "<cleantile-tabs> default coloring", ->
      [pane, first, def, last] = []
      
      beforeEach (done) ->
        pane = fixture "trio"
        flush ->
          first = pane.querySelector "cleantile-tab:nth-of-type(1)"
          def = pane.querySelector "cleantile-tab:nth-of-type(2)"
          last = pane.querySelector "cleantile-tab:nth-of-type(3)"
          done()
      
      it "should mark the middle tab as the default", ->
        expect(def.active).to.equal true
      
      it "should display inactive tabs in the same color", ->
        f = window.getComputedStyle(first).getPropertyValue("background-color")
        l = window.getComputedStyle(last).getPropertyValue("background-color")
        expect(f).to.equal l
      
      it "should display active tabs in a different color", ->
        f = window.getComputedStyle(first).getPropertyValue("background-color")
        d = window.getComputedStyle(def).getPropertyValue("background-color")
        expect(f).to.not.equal d
    
    describe "<cleantile-tabs> click behavior", ->
      [pane, first, second] = []
      
      beforeEach (done) ->
        pane = fixture "toggling"
        flush ->
          first = pane.querySelector "cleantile-tab:nth-of-type(1)"
          second = pane.querySelector "cleantile-tab:nth-of-type(2)"
          second.click()
          flush ->
            done()
      
      it "should mark the second tab as active", ->
        expect(second.active).to.equal true
      
      it "should clear the first tab", ->
        expect(first.active).to.equal false
