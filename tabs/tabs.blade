- var id="cleantile-tabs"
include "../lib/tag" exposing id

replace docs
  /**
`<cleantile-tabs>` adds controls to [`<cleantile-pane>`](#cleantile-pane) elements.

    <cleantile-pane>
      <cleantile-tabs></cleantile-tabs>
      <file-editor file="README.md" syntax="markdown"></file-editor>
      <file-editor file="LICENSE" syntax="text"></file-editor>
    </cleantile-pane>

Tabs ([`<cleantile-tab>`](#cleantile-tab)) are automatically created for each view inside the `<cleantile-pane>`, and
are updated when the views change.

### Styling

Custom Property | Description | Default
--------------- | ----------- | -------
`--cleantile-tabs-height` | The space set aside above views for tabs.  Tabs fill the space with a small margin. | `30px`
`--cleantile-tabs-background` | A background color used between tabs. | `#424242`

See [`<cleantile-tab>`](#cleantile-tab) for styling properties that modify individual tabs.

@demo tabs/demo/pane-tabs.compiled.html Tabs inside a Pane
@demo tabs/demo/split-tabs.compiled.html Tabs inside a Split
  */

replace style
  :stylus
    :host
      display block
      height unquote("var(--cleantile-tabs-height, 30px)")
      background-color unquote("var(--cleantile-tabs-background, #424242)")

append imports
  link(rel="import", href="../tab/cleantile-tab.html")

replace template
  template(is="dom-repeat", items="{{views}}")
    cleantile-tab(tab="{{item}}", active="{{item.active}}", on-tap="activate")
  content

replace script
  :coffeescript
    Polymer
      is: "cleantile-tabs"
      properties:
        ###*
        A list of views inside the `<cleantile-pane>`, syncronized from `<cleantile-pane>`.
        
        See [`<cleantile-pane>.views`](#cleantile-pane:property-views) for more information.
        ###
        views:
          type: Array
      ready: ->
        @views = []
        pane = Polymer.dom(@).parentNode
        return unless pane.tagName.toLowerCase() is "cleantile-pane"
        @pane = pane
        for view in @pane.views
          @push "views", view
      ###*
      Activates views when the respective tab is clicked.
      ###
      activate: (e) ->
        @pane.activate @views.indexOf e.model.item
