- var opts = {title: "cleantile-split setPercent", path: "../../../"}
include "../../lib/test" exposing opts
include "./util"

append imports
  link(rel="import", href="../../../promise-polyfill/promise-polyfill-lite.html")
  link(rel="import", href="../../container/cleantile-container.html")
  link(rel="import", href="../cleantile-split.html")
  link(rel="import", href="../../pane/cleantile-pane.html")
  link(rel="import", href="../../demo/text-view/cleantile-text-view.html")

append style
  :stylus
    body
      margin 0
      padding 0
    html, body, cleantile-container
      width 100%
      height 100%

append fixtures
  call splitFixture("horizontal")
  call splitFixture("vertical")


append tests
  :coffeescript
    flushAsync = ->
      new Promise (resolve, reject) ->
        flush ->
          resolve()
    
    describe "<cleantile-split>.setPercent", ->
      for direction in ["horizontal", "vertical"]
        do (direction) ->
          property = if direction is "horizontal" then "width" else "height"
          describe "direction='#{direction}'", ->
            
            describe "default boundary", ->
              
              [container, first, second] = []
              
              beforeEach ->
                container = fixture direction
                first = container.querySelector "#first"
                second = container.querySelector "#second"
              
              it "should set the boundary to '50%'", ->
                expect(container.boundary).to.equal "50%"
              
              it "should set the children's '#{property}' to '50%'", ->
                expect(first.style[property]).to.equal "50%"
                expect(second.style[property]).to.equal "50%"
            
            describe "boundary = '25%'", ->
              
              [container, first, second] = []
              
              beforeEach ->
                container = fixture direction
                first = container.querySelector "#first"
                second = container.querySelector "#second"
                container.boundary = "25%"
                flushAsync()
              
              it "should set the boundary to '25%'", ->
                expect(container.boundary).to.equal "25%"
              
              it "should set the first pane's #{property} to '25%'", ->
                expect(first.style[property]).to.equal "25%"
              
              it "should set the second pane's #{property} to '75%'", ->
                expect(second.style[property]).to.equal "75%"
            
            describe "boundary = '-25%'", ->
              
              [container, first, second] = []
              
              beforeEach ->
                container = fixture direction
                first = container.querySelector "#first"
                second = container.querySelector "#second"
                container.boundary = "-25%"
                flushAsync()
              
              it "should set the boundary to '-25%'", ->
                expect(container.boundary).to.equal "-25%"
              
              it "should set the first pane's #{property} to '75%'", ->
                expect(first.style[property]).to.equal "75%"
              
              it "should set the second pane's #{property} to '25%'", ->
                expect(second.style[property]).to.equal "25%"
