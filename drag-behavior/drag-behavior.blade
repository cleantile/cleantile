include "../lib/license"
include "../lib/blade-warning"
:coffeescript
  window.CleanTile ?= {}
  ###*
  Describes a partion between the two sides of a [`<cleantile-split>`][].  Used in [`<cleantile-drag>`][].
  
  Custom drag elements **must** extend the DragBehavior to be recognized by [`<cleantile-split>`][], and be sent data as
  it changes.
  
      <dom-module id="narrow-drag">
        <template>
        </template>
        <script>
          Polymer({
            is: "narrow-drag",
            behaviors: [CleanTile.DragBehavior],
            ready: function() {
              // this.name can be preset via `<wrapper-file-preview name="File: index.html">`
              if(!this.name) {
                this.name = "File Preview";
              }
            }
          })
        </ script >
      </dom-module>
  
  [`<cleantile-split>`]: #cleantile-split
  [`<cleantile-drag>`]: #cleantile-drag
  
  @polymerBehavior
  ###
  CleanTile.DragBehavior =
    properties:
      
      ###*
      Determines if the elements in the parent split are nested above each other (`vertical`) or next to each other
      (`horizontal`).
      
      Value automatically fetched from parent `cleantile-split`.
      ###
      direction:
        type: String
        value: "horizontal"
        reflectToAttribute: yes
      
      ###*
      Sets the division point between the two elements of the parent split.  Can contain:
      
      - `val` (`<cleantile-split>.boundary`)
      - `min` (`<cleantile-split>.min-boundary`)
      - `max` (`<cleantile-split>.max-boundary`)
      
      The parent split will be notified of changes to any of the fields in `boundary`.
      ###
      boundary:
        type: Object
        value: -> {}
      
      ###*
      The amount of space that should be left between the two sides of the split for the dragger.
      
      Additional padding around the bar should be included in the `width` property, and CSS inside the dragger should
      add the margin on either side of the bar.
      ###
      width:
        type: Number
        value: 0
        observer: "_widthChanged"
    
    observers: [
      "_boundaryChanged(boundary.val, boundary.min, boundary.max)"
    ]
    
    ###*
    Returns the parent split, if one exists.
    @return {HTMLElement} the `<cleantile-split>`, if one exists.
    ###
    split: ->
      try
        parent = Polymer.dom(@).parentNode
        while parent.tagName.toLowerCase() isnt "cleantile-split"
          parent = parent.parentNode
        return parent
      catch e
        return
    
    ###*
    If the parent split has been initialized, fetch property values.
    ###
    ready: ->
      split = @split()
      if split and split.get
        @pullDirection()
        @pullBoundary()
      else
        setTimeout =>
            @pullDirection()
            @pullBoundary()
          , 0
    
    ###*
    Fetch 'direction' from parent split.
    ###
    pullDirection: (split) ->
      split ?= @split()
      return unless split.get
      @set "direction", split.get "direction"
    
    ###*
    Fetch 'boundary' from parent split.
    ###
    pullBoundary: (split) ->
      split ?= @split()
      return unless split.get
      @set "boundary",
        val: split.get "boundary"
        min: split.get "min-boundary"
        max: split.get "max-boundary"
    
    ###*
    Keeps the parent `<cleantile-split>` in sync with the properties in `boundary`.
    ###
    _boundaryChanged: (val, min, max) ->
      console.log("Updating boundary")
      return console.warn("Can't update boundary of split") unless (split = @split()) and split.set
      split.set "boundary", val
      split.set "min-boundary", min
      split.set "max-boundary", max
    
    ###*
    Keeps the parent `<cleantile-split>` in sync with this split's `width`.
    ###
    _widthChanged: (width) ->
      if (split = @split()) and split.set then split.set "dragWidth", width
