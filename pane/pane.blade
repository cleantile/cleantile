- var id="cleantile-pane"
include "../lib/tag" exposing id

replace docs
  /**
`<cleantile-pane>` displays a set of application-specific pages, called **views**.

    <cleantile-pane>
      <file-editor file="README.md" syntax="markdown"></file-editor>
      <file-editor file="LICENSE" syntax="text"></file-editor>
    </cleantile-pane>

See [`CleanTile.ViewBehavior`][] for a longer description of views, as well as instructions to create your own views.

[`CleanTile.ViewBehavior`]: #CleanTile.ViewBehavior

@demo demo/simple-binding.compiled.html Polymer Binding between Panes
@demo demo/pane.compiled.html Pane Demo
  */

replace style
  :stylus
    :host
      display block
      width 100%
      height 100%
      position relative
    $fill
      display block
      width 100%
      height 100%
      position absolute
      top 0
      left 0
    #contents
      @extend $fill
    #contents ::content > cleantile-tabs
      position absolute
      top 0
      left 0
      width 100%
      z-index 15
      ~ :not(cleantile-tabs)
        top unquote("var(--cleantile-tabs-height, 30px)")
        height unquote("calc(100% - var(--cleantile-tabs-height, 30px))")
    #contents ::content > :not(cleantile-tabs)
      @extend $fill
      &[active]
        z-index 10
      &:not([active])
        z-index -10
    #contents::after
      @extend $fill
      content: " "
      background-color unquote("var(--cleantile-pane-background, white)")
      z-index 0

replace template
  div#contents
    content

replace script
  :coffeescript
    Polymer
      is: "cleantile-pane"
      properties:
        ###*
        Lists the **views** inside this pane.
        
        @type [{element: HTMLElement, name: String, active: Boolean}]
        ###
        views:
          type: Array
          notify: yes
          readOnly: yes
      listeners:
        "changed-name": "changed-name"
        "changed-active": "changed-active"
      ###*
      Manually refreshes `this.views`, the list of views inside this pane.  Uses low-level DOM queries.
      ###
      refreshList: ->
        views = []
        active = null
        for child in @$.contents.children
          continue if child.tagName.toLowerCase() in ["cleantile-tabs", "template", "span", "div"]
          views.push
            element: child
            name: child.name
            active: child.active
          active = (views.length - 1) if child.active or child.getAttribute("active") is "active"
        # @TODO: check if elements are marked as not active, and default to the last element not marked
        active ?= views.length - 1
        @_setViews views
        @activate active if views.length > 0
      ###*
      Manually finds a `cleantile-tabs` element inside this pane, if one exists.
      ###
      refreshTabs: ->
        return unless tabs = @$.contents.querySelector("cleantile-tabs")
        @tabs = tabs
      ready: ->
        @views = []
        @refreshList()
        @refreshTabs()
      ###*
      Listens to view name changes, and updates `this.views`.  If a `cleantile-tabs` element has been found in this pane
      view, also updates the list of views inside `cleantile-tabs`.
      ###
      "changed-name": (e) ->
        return unless @views
        for child, i in @views when e.target is child.element
          e.preventDefault()
          @set ["views", i, "name"], e.detail
          if @tabs
            @tabs.set ["views", i, "name"], e.detail
          return
        console.log "Couldn't find child to update name."
      ###*
      Listens to view `active` changes, and updates `this.views`.  If a `cleantile-tabs` element has been found in this
      pane view, also updates the list of views inside `cleantile-tabs`.
      ###
      "changed-active": (e) ->
        return unless @views
        for child, i in @views when e.target is child.element
          e.preventDefault()
          @set ["views", i, "active"], e.detail
          if @tabs
            @tabs.set ["views", i, "active"], e.detail
          return
        console.log "Couldn't find child to update active status."
      ###*
      Activate a specific view
      
      @param [Integer] i the view to activate
      ###
      activate: (i) ->
        unless @views[i]
          return console.error new ReferenceError("Can't activate view #{i}: view not found.  Ignoring.")
        for el in @$.contents.querySelectorAll("#contents > [active]")
          if el.set
            el.set "active", false
          else
            el.removeAttribute "active"
        if @views[i].element.set
          @views[i].element.set "active", true
        else
          @views[i].element.setAttribute "active", "active"
